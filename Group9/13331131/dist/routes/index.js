// Generated by LiveScript 1.3.1
(function(){
  var express, fs, Assignment, Homework, path, Md, router, mkdirsSync, stringToDate, isAuthenticated;
  express = require('express');
  fs = require('fs');
  Assignment = require('../models/assignment');
  Homework = require('../models/homework');
  path = require('path');
  Md = require('markdown');
  router = express.Router();
  mkdirsSync = function(dirpath, mode, callback){
    if (fs.existsSync(dirpath)) {
      return true;
    } else {
      if (mkdirsSync(path.dirname(dirpath), mode)) {
        fs.mkdirSync(dirpath, mode);
        return true;
      }
    }
  };
  stringToDate = function(str){
    var dateStr;
    dateStr = str.replace('-', '/');
    return new Date(dateStr);
  };
  isAuthenticated = function(req, res, next){
    if (req.isAuthenticated()) {
      return next();
    } else {
      return res.redirect('/login');
    }
  };
  module.exports = function(passport){
    router.get('/', function(req, res){
      res.redirect('/assignments');
    });
    router.get('/login', function(req, res){
      if (req.isAuthenticated()) {
        res.redirect('/');
      } else {
        res.render('login');
      }
    });
    router.post('/login', passport.authenticate('login', {
      successRedirect: '/home',
      failureRedirect: '/',
      failureFlash: true
    }));
    router.get('/signup', function(req, res){
      var links;
      links = [
        {
          to: '/home',
          name: '首页'
        }, {
          to: '/assign',
          name: '注册'
        }
      ];
      res.render('signup', {
        links: links
      });
    });
    router.post('/signup', passport.authenticate('signup', {
      successRedirect: '/assign',
      failureRedirect: '/signup',
      failureFlash: true
    }));
    router.get('/home', isAuthenticated, function(req, res){
      var links;
      links = [
        {
          to: '/home',
          name: '首页'
        }, {
          to: '/assign',
          name: '发布作业'
        }
      ];
      res.redirect('/assignments');
    });
    router.get('/signout', function(req, res){
      req.logout();
      res.redirect('/');
    });
    router.get('/assign', isAuthenticated, function(req, res){
      var links;
      links = [
        {
          to: '/home',
          name: '首页'
        }, {
          to: '/assign',
          name: '发布作业'
        }
      ];
      res.render('post', {
        to: '/assign',
        user: req.user,
        links: links
      });
    });
    router.post('/assign', isAuthenticated, function(req, res){
      var newAssignment;
      newAssignment = new Assignment({
        title: req.param('title'),
        deadline: stringToDate(req.param('deadline')),
        description: req.param('description'),
        teacherId: req.user._id,
        teacherName: req.user.name
      });
      newAssignment.save(function(err){
        if (err) {
          return handleError(err);
        }
        return Assignment.findById(newAssignment, function(err, doc){
          if (err) {
            return handleError(err);
          }
          res.redirect('/assignments/' + doc._id);
          console.log(doc);
        });
      });
    });
    router.get('/assignments', isAuthenticated, function(req, res){
      var links;
      links = [
        {
          to: '/home',
          name: '首页'
        }, {
          to: '/assignments',
          name: '作业库'
        }
      ];
      if (req.user.identity === 0) {
        Assignment.find(function(err, hwlist){
          if (err) {
            return handleError(err);
          }
          res.render('hwlist', {
            asmlist: hwlist,
            user: req.user,
            links: links
          });
        });
      } else {
        Assignment.find({
          'teacherId': req.user._id
        }, function(err, hwlist){
          if (err) {
            return handleError(err);
          }
          res.render('hwlist', {
            asmlist: hwlist,
            user: req.user,
            links: links
          });
        });
      }
    });
    router.get(/^\/assignments\/(.*)/, isAuthenticated, function(req, res){
      var links, assignmentId;
      links = [
        {
          to: '/home',
          name: '首页'
        }, {
          to: '/assignments',
          name: '作业库'
        }
      ];
      assignmentId = req.params[0];
      Assignment.findById(assignmentId, function(err, doc){
        if (err) {
          return handleError(err);
        }
        Homework.find({
          'requirementId': assignmentId
        }, function(err, hwlist){
          var now, isvalid;
          now = new Date();
          isvalid = now < doc.deadline ? true : false;
          links.push({
            to: '/assignments/' + doc._id,
            name: doc.title
          });
          res.render('detail', {
            assignment: doc,
            hwlist: hwlist,
            user: req.user,
            isvalid: isvalid,
            links: links
          });
        });
      });
    });
    router.post('/upload', isAuthenticated, function(req, res){
      var obj, tmpPath, newPath, ref$, head, tail;
      if (req.user.identity === 1) {
        console.log('Not Allow to Submit');
        return;
      }
      obj = req.files.homework;
      tmpPath = obj.path;
      newPath = './dist/uploads/' + req.param('assignment_title');
      newPath += req.param('assignment_id') + '/';
      console.log(newPath);
      mkdirsSync(newPath);
      console.log(obj.name.split('.'));
      ref$ = obj.name.split('.'), head = ref$[0], tail = ref$[1];
      newPath += req.user.name + req.user.username + '.' + tail;
      fs.rename(tmpPath, newPath, function(err){
        if (err) {
          throw err;
        }
      });
      Homework.findOne({
        requirementId: req.param('assignment_id', {
          studentUsr: req.user.username
        })
      }, function(err, result){
        var newHomework;
        if (result) {
          Homework.update({
            _id: result._id
          }, {
            $set: {
              extend: tail,
              date: Date()
            }
          }, function(err){});
        } else {
          newHomework = new Homework({
            requirementId: req.param('assignment_id'),
            requirementName: req.param('assignment_title'),
            studentUsr: req.user.username,
            studentName: req.user.name,
            extend: tail
          });
          newHomework.save(function(err){
            if (err) {
              return handleError(err);
            }
            return Homework.findById(newHomework, function(err, doc){
              if (err) {
                return handleError(err);
              }
              console.log(doc);
            });
          });
        }
      });
    });
    router.get(/^\/download\/(.*)/, isAuthenticated, function(req, res){
      if (req.user.identity === 0) {
        res.send('没有权限');
        return;
      }
      res.download(req.params[0], function(err){});
    });
    router.post('/modify', isAuthenticated, function(req, res){
      var assiId, newDate;
      if (req.user.identity === 0) {
        console.log('Not Allow to Modify');
        return;
      }
      assiId = req.param('assignment_id');
      newDate = stringToDate(req.param('deadline'));
      if (newDate < Date()) {
        res.send('1');
      } else {
        Assignment.findOneAndUpdate({
          _id: assiId
        }, {
          $set: {
            deadline: newDate
          }
        }, function(err){
          res.send(req.param('deadline'));
        });
      }
    });
    router.get('/update', isAuthenticated, function(req, res){
      var links;
      links = [
        {
          to: '/home',
          name: '首页'
        }, {
          to: '/assignments',
          name: '作业库'
        }
      ];
      if (req.user.identity === 0) {
        console.log('Not Allow to Visit');
        return;
      }
      Assignment.findById(req.param('aid'), function(err, doc){
        console.log(doc);
        links.push({
          to: '/assignments/' + doc._id,
          name: doc.title
        });
        links.push({
          to: '/update',
          name: '更新'
        });
        res.render('post', {
          user: req.user,
          assignment: doc,
          to: '/update',
          links: links
        });
      });
    });
    router.post('/update', isAuthenticated, function(req, res){
      var newDate;
      if (req.user.identity === 0) {
        console.log('Not Allow to Visit');
        return;
      }
      newDate = stringToDate(req.param('deadline'));
      Assignment.findOneAndUpdate({
        _id: req.param('aid')
      }, {
        $set: {
          deadline: newDate,
          description: req.param('description')
        }
      }, function(err){
        res.redirect('/assignments/' + req.param('aid'));
      });
    });
    return router.post('/score', isAuthenticated, function(req, res){
      if (req.user.identity === 0) {
        console.log('Not Allow to Score');
        return;
      }
      Homework.update({
        _id: req.param('homework_id')
      }, {
        $set: {
          score: +req.param('score')
        }
      }, function(err){});
    });
  };
}).call(this);
